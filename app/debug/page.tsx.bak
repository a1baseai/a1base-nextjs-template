"use client";

import { useEffect, useState } from "react";
import { AlertTriangle, ExternalLink, RefreshCw, CheckCircle2, Upload, ImageIcon, Sparkles } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { toast } from "@/components/ui/use-toast";
import { ToastAction } from "@/components/ui/toast";

export default function DebugPage() {
  const [envStatus, setEnvStatus] = useState<{
    openaiKeyAvailable: boolean;
    anthropicKeyAvailable: boolean;
    grokKeyAvailable: boolean;
    a1baseKeyAvailable: boolean;
    a1baseAgentName: string | null;
    a1baseAgentNumber: string | null;
    selectedModelProvider: string;
  }>({
    openaiKeyAvailable: false,
    anthropicKeyAvailable: false,
    grokKeyAvailable: false,
    a1baseKeyAvailable: false,
    a1baseAgentName: null,
    a1baseAgentNumber: null,
    selectedModelProvider: "openai",
  });
  
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [profileName, setProfileName] = useState("");
  const [profilePictureUrl, setProfilePictureUrl] = useState("");
  const [isUpdatingProfileName, setIsUpdatingProfileName] = useState(false);
  const [isUpdatingProfilePicture, setIsUpdatingProfilePicture] = useState(false);
  const [isSavingChunkSetting, setIsSavingChunkSetting] = useState(false);
  const [messageChunkingEnabled, setMessageChunkingEnabled] = useState(false);
  const [webhookUrls, setWebhookUrls] = useState({
    phoneWebhook: "",
    emailWebhook: ""
  });

  async function checkEnvVars() {
    setIsLoading(true);
    try {
      const response = await fetch("/api/debug-env");
      const data = await response.json();
      setEnvStatus(data);
      
      // Set the profile name from env variables if available
      if (data.a1baseAgentName) {
        setProfileName(data.a1baseAgentName);
      }
      
      // Load message chunking setting
      await checkMessageChunkingSetting();
    } catch (error) {
      console.error("Failed to check environment variables:", error);
    } finally {
      setIsLoading(false);
    }
  }
  
  async function checkMessageChunkingSetting() {
    try {
      const response = await fetch("/api/settings/message-chunking");
      if (response.ok) {
        const data = await response.json();
        setMessageChunkingEnabled(data.splitParagraphs || false);
      }
    } catch (error) {
      console.error("Failed to check message chunking setting:", error);
    }
  }

  async function saveModelProvider(provider: string) {
    setIsSaving(true);
    try {
      const response = await fetch("/api/settings/model-provider", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ selectedModelProvider: provider }),
      });

      const data = await response.json();
      
      if (response.ok) {
        // Update local state
        setEnvStatus((prev) => ({
          ...prev,
          selectedModelProvider: provider,
        }));
        
        toast({
          title: "Model provider updated",
          description: `Successfully switched to ${provider.toUpperCase()} APIs`,
          variant: "default",
        });
      } else {
        throw new Error(data.error || "Failed to update model provider");
      }
    } catch (error) {
      console.error("Failed to update model provider:", error);
      toast({
        title: "Update failed",
        description: error instanceof Error ? error.message : "Failed to update model provider",
        variant: "destructive",
        action: <ToastAction altText="Try again">Try again</ToastAction>,
      });
    } finally {
      setIsSaving(false);
    }
  }
  
  async function updateWhatsAppProfileName() {
    if (!profileName) {
      toast({
        title: "Profile name required",
        description: "Please enter a profile name",
        variant: "destructive",
      });
      return;
    }
    
    setIsUpdatingProfileName(true);
    try {
      const response = await fetch("/api/whatsapp/profile/update-name", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ name: profileName }),
      });

      const data = await response.json();
      
      if (response.ok && data.success) {
        toast({
          title: "Profile name updated",
          description: "WhatsApp profile name updated successfully",
          variant: "default",
        });
      } else {
        throw new Error(data.message || "Failed to update WhatsApp profile name");
      }
    } catch (error) {
      console.error("Failed to update WhatsApp profile name:", error);
      toast({
        title: "Update failed",
        description: error instanceof Error ? error.message : "Failed to update WhatsApp profile name",
        variant: "destructive",
      });
    } finally {
      setIsUpdatingProfileName(false);
    }
  }
  
  async function updateWhatsAppProfilePicture() {
    if (!profilePictureUrl) {
      toast({
        title: "Profile picture URL required",
        description: "Please enter a valid image URL",
        variant: "destructive",
      });
      return;
    }
    
    setIsUpdatingProfilePicture(true);
    try {
      const response = await fetch("/api/whatsapp/profile/update-picture", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ imageUrl: profilePictureUrl }),
      });

      const data = await response.json();
      
      if (response.ok && data.success) {
        toast({
          title: "Profile picture updated",
          description: "WhatsApp profile picture updated successfully",
          variant: "default",
        });
        
        // Clear the input field after successful update
        setProfilePictureUrl("");
      } else {
        throw new Error(data.message || "Failed to update WhatsApp profile picture");
      }
    } catch (error) {
      console.error("Failed to update WhatsApp profile picture:", error);
      toast({
        title: "Update failed",
        description: error instanceof Error ? error.message : "Failed to update WhatsApp profile picture",
        variant: "destructive",
      });
    } finally {
      setIsUpdatingProfilePicture(false);
    }
  }
  
  async function toggleMessageChunking(enabled: boolean) {
    setIsSavingChunkSetting(true);
    try {
      const response = await fetch("/api/settings/message-chunking", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ splitParagraphs: enabled }),
      });

      const data = await response.json();
      
      if (response.ok) {
        setMessageChunkingEnabled(enabled);
        toast({
          title: enabled ? "Message chunking enabled" : "Message chunking disabled",
          description: enabled 
            ? "WhatsApp messages will be split by paragraph"
            : "WhatsApp messages will be sent as single messages",
          variant: "default",
        });
      } else {
        throw new Error(data.error || "Failed to update message chunking setting");
      }
    } catch (error) {
      console.error("Failed to update message chunking setting:", error);
      toast({
        title: "Update failed",
        description: error instanceof Error ? error.message : "Failed to update message chunking setting",
        variant: "destructive",
      });
    } finally {
      setIsSavingChunkSetting(false);
    }
  }

  useEffect(() => {
    checkEnvVars();
    
    // Set webhook URLs on client-side only
    setWebhookUrls({
      phoneWebhook: `${window.location.origin}/api/webhook/a1base`,
      emailWebhook: `${window.location.origin}/api/webhook/a1mail`
    });
  }, []);

  return (
    <div className="container px-4 sm:px-6 py-6 sm:py-8 space-y-6 sm:space-y-8">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-3xl font-bold">Environment Configuration</h1>
        <Button 
          variant="outline" 
          size="sm" 
{{ ... }}
          Refresh
        </Button>
      </div>

      <Card className="mb-8">
        <CardHeader className="px-4 sm:px-6">
          <CardTitle className="text-xl sm:text-2xl">Environment Variables Status</CardTitle>
          <CardDescription className="text-sm">
            Check the status of your environment variables required for full functionality
          </CardDescription>
        </CardHeader>
        <CardContent className="pt-6">
          <div className="grid gap-6 md:grid-cols-3">
            <div className={`p-4 rounded-lg border ${envStatus.openaiKeyAvailable ? "bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-800" : "bg-red-50 border-red-200 dark:bg-red-900/20 dark:border-red-800"}`}>
{{ ... }}
            </div>
          </div>
        </CardContent>
      </Card>
      
      <Card className="overflow-hidden">
        <CardHeader className="bg-muted/50 px-4 sm:px-6">
          <CardTitle className="text-xl sm:text-2xl">Model Provider Selection</CardTitle>
          <CardDescription className="text-sm">
            Select which AI model provider you want to use for your agent
          </CardDescription>
        </CardHeader>
        <CardContent className="pt-6">
          <RadioGroup
            value={envStatus.selectedModelProvider}
{{ ... }}
            </p>
          </div>
        </CardContent>
      </Card>

      <Card className="overflow-hidden">
        <CardHeader className="bg-muted/50 px-4 sm:px-6">
          <CardTitle className="text-xl sm:text-2xl">A1Base WhatsApp Profile</CardTitle>
          <CardDescription className="text-sm">
            Configure your WhatsApp agent's profile settings
          </CardDescription>
        </CardHeader>
        <CardContent className="pt-6">
          <div className={envStatus.a1baseAgentNumber ? "" : "opacity-60 pointer-events-none"}>  
            <div className="space-y-6">
{{ ... }}
          <div className={envStatus.a1baseAgentNumber ? "" : "opacity-60 pointer-events-none"}>  
            <div className="space-y-6">
              {/* Profile Name Update Section */}
              <div>
                <h3 className="text-base font-medium mb-2">Update Profile Name</h3>
                  <div className="border rounded-md p-3 sm:p-4 w-full sm:w-[300px]">
                    <div className="flex flex-col space-y-3">
                      <Input
                        placeholder="Enter profile name"
                        value={profileName}
                        onChange={(e) => setProfileName(e.target.value)}
                        disabled={!envStatus.a1baseAgentNumber || isUpdatingProfileName}
                        className="w-full"
                      />
                    </div>
                  </div>
                  <Button 
{{ ... }}
              
              {/* Message Chunking Toggle */}
              <div className="mt-8">
                <h3 className="text-base font-medium mb-4">Message Settings</h3>
                <div className="flex items-center justify-between p-4 rounded-md border">
                  <div className="flex w-full flex-col sm:flex-row sm:space-x-2 space-y-2 sm:space-y-0 sm:items-end">
                  <div className="flex-1 space-y-1">5 text-blue-500 flex-shrink-0 mt-0.5" />
                    <div>
                      <h4 className="font-medium">WhatsApp Message Chunking</h4>
                      <p className="text-xs sm:text-sm text-muted-foreground">
                        Split large messages into multiple paragraphs when sending through WhatsApp.
                        This improves readability and delivery reliability for long messages.                      
{{ ... }}
                  </div>
                </div>
              </div>
            </div>
            
            {!envStatus.a1baseAgentNumber &&                  <div className="bg-amber-50 dark:bg-amber-900/20 text-amber-700 dark:text-amber-300 border border-amber-200 dark:border-amber-800 rounded-md px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2">
                  <AlertTriangle className="h-5 w-5 text-amber-600 dark:text-amber-400 flex-shrink-0 mt-0.5" />
                  <div>
                    <h3 className="font-medium text-amber-800 dark:text-amber-300 mb-1">WhatsApp number not configured</h3>
                    <p className="text-sm text-amber-700 dark:text-amber-400">
                      To update WhatsApp profile settings, you need to get a WhatsApp number from A1Base and configure
{{ ... }}
                    </p>
                    <Button variant="outline" size="sm" className="mt-2 gap-2" asChild>
                      <a href="https://www.a1base.com/dashboard/phone-numbers" target="_blank" rel="noopener noreferrer">
                        Get a WhatsApp number
                        <ExternalLink className="h-4 w-4" />
                      </a>
                    </Button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
      
      <Card className="overflow-hidden">
        <CardHeader className="bg-muted/50 px-4 sm:px-6">
          <CardTitle className="text-xl sm:text-2xl">Webhook Configuration</CardTitle>
          <CardDescription className="text-sm">
            Configure webhooks for your A1Base channels
          </CardDescription>
        </CardHeader>
        <CardContent className="pt-4 sm:pt-6 px-4 sm:px-6">
          <Tabs defaultValue="phone">
            <TabsList className="mb-4 w-full grid grid-cols-2">
              <TabsTrigger value="phone">WhatsApp/SMS</TabsTrigger>
              <TabsTrigger value="email">Email</TabsTrigger>
            </TabsList>
            
            <TabsContent value="phone" className="space-y-4">
              <p className="text-sm text-muted-foreground mb-4">
                Configure your WhatsApp and SMS webhooks to enable message handling through A1Framework.
              </p>
              
              <div className="p-3 sm:p-4 bg-amber-50 border border-amber-200 rounded-lg dark:bg-amber-900/20 dark:border-amber-800">
                <div className="flex gap-2 sm:gap-3">
                  <AlertTriangle className="h-5 w-5 text-amber-600 dark:text-amber-400 flex-shrink-0 mt-0.5" />
                  <div>
                    <h3 className="font-medium text-amber-800 dark:text-amber-300 mb-1">Important Setup Step</h3>
                    <p className="text-xs sm:text-sm text-amber-700 dark:text-amber-400">
                      Set your webhook URL to <code className="px-1 py-0.5 sm:px-2 sm:py-1 bg-amber-100 dark:bg-amber-800/40 rounded text-xs sm:text-sm break-all">{webhookUrls.phoneWebhook}</code> in the A1Base dashboard.
                    </p>
                  </div>
                </div>
              </div>
              
              <Button variant="outline" className="gap-2" asChild>
                <a href="https://www.a1base.com/dashboard/phone-numbers" target="_blank" rel="noopener noreferrer">
                  Configure Phone Webhooks
                  <ExternalLink className="h-4 w-4" />
                </a>
              </Button>
            </TabsContent>
            
            <TabsContent value="email" className="space-y-4">
              <p className="text-sm text-muted-foreground mb-4">
                Configure your email webhooks to enable email handling through A1Framework.
              </p>
              
              <div className="p-3 sm:p-4 bg-amber-50 border border-amber-200 rounded-lg dark:bg-amber-900/20 dark:border-amber-800">
                <div className="flex gap-2 sm:gap-3">
                  <AlertTriangle className="h-5 w-5 text-amber-600 dark:text-amber-400 flex-shrink-0 mt-0.5" />
                  <div>
                    <h3 className="font-medium text-amber-800 dark:text-amber-300 mb-1">Important Setup Step</h3>
                    <p className="text-sm text-amber-700 dark:text-amber-400">
                      Set your email webhook URL to <code className="px-2 py-1 bg-amber-100 dark:bg-amber-800/40 rounded">{webhookUrls.emailWebhook}</code> in the A1Base dashboard.
                    </p>
                  </div>
                </div>
              </div>
              
              <Button variant="outline" className="gap-2" asChild>
                <a href="https://www.a1base.com/dashboard/email-addresses" target="_blank" rel="noopener noreferrer">
                  Configure Email Webhooks
                  <ExternalLink className="h-4 w-4" />
                </a>
              </Button>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}
